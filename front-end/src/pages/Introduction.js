import React from 'react';
import MarkdownRenderer from '../components/MarkdownRenderer';

const Introduction = () => {
  const markdownContent = `
# Portfolio-Management via RL and GAT
![image](https://hackmd.io/_uploads/BySm8QsFkg.png)

### **get Financial Statement.ipynb** : grab financial statement data from Finmind for use by GAT
* Stock-Picked Agent/Financial statements_SharpeRatio_RL.csv
* GAT-main/data/{stock_filename}.csv
### **get Trading Data.ipynb** : capture daily transaction data from Finmind for use by TCN-AE
* TCN-AE/output_original_data.csv
---

## **GAT-main** : obtain relationship between stocks

Calculate the relationship between each stock based on quarterly financial report data and generate a 74*74 Graph

#### input : 19 financial information*74 stocks
#### output : 1 * 74(Sharpe value of each stock)

## **Stock-Picked Agent** : pick a low-risk investment portfolio
* before-samemodel-std-edge/tensor_epoch_{year}-{month}-{date}.csv : 
    The 74*74 Graph of each season that generated by GAT
* combin Financial statement and GAT edge.ipynb : 
    Merge into "Input for Stock-Picked Agent train.csv"
    (The senior suggested that we can cut train and predict data at the end of "combin Financial statement and GAT edge.ipynb".)

Using the relationships between individual stocks provided by GAT and 19 financial report features, the Stock-Picked Agent is trained to maximize the average Sharpe ratio of the selected stocks. Ultimately, the portfolio with the lowest risk is obtained and will be used until the next quarter's financial reports are released

#### input : 74 * 74 Graph & 19 financial information * 74 stocks & the Sharpe value corresponding to its financial report & the selected status(total : 74x(19+74)+2x74+1)
#### output : 1 * 74 Whether each stock is selected

## **TCN-AE** : number of transactions per day feature compression
Compress the 20 * 117 feature data into 1 * 20 and then reconstruct it to its original appearance to train TCN-AE in this way
#### input : 20 days * 117 feature for each data
#### output : 1 featrue * 20days (from encoder)

## **Trading Agent** : trade based on the combination given by the agent and the result of TCN-AE 
* tcn_daily_trade_info.csv generated by TCN-AE
* Low-risk stock list.csv from Stock-Picked Agent
* twse_divide_ratio_TCN.csv, csp_TCN.csv obtained by Web Crawler(no program can use now)

Use the investment portfolio provided by Stock-Picked Agent and the compressed results of TCN-AE to train the Trading Agent with the goal of maximizing cumulative returns.


N : len(low-risk list)
#### input : Nx20x1 (past 20 days for each stock) + 2N+1(current stock price information and portfolio asset position + cash)
#### output : N (a value between -1 and 1 for each stocks)
`;

  return <MarkdownRenderer content={markdownContent} />;
};

export default Introduction;
